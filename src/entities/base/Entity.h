/**
 * @file Entity.h
 * @brief Declaration of the Entity class representing a game entity with various properties and states.
 */

#ifndef ENTITY_H
#define ENTITY_H

#include <string>
#include "utils/Size.h"
#include "entities/state/State.h"
#include "utils/ConfigManager.h"
#include <vector>

// Forward declarations
class UnderConstruction; 
class Built; 

/**
 * @class Entity
 * @brief Represents a game entity with properties such as position, size, and state.
 *
 * The Entity class is responsible for managing the state of the entity,
 * including its position, dimensions, and resource consumption.
 */
class Entity
{
protected:
    std::string symbol;               ///< Symbol representing the entity.
    int effectRadius;                 ///< Radius of effect for this entity.
    int localEffectStrength;          ///< Local effect strength of the entity.
    int globalEffectStrength;         ///< Global effect strength of the entity.
    int width;                        ///< Width of the entity.
    int height;                       ///< Height of the entity.
    int xPosition;                    ///< X-coordinate of the entity's position (bottom left corner).
    int yPosition;                    ///< Y-coordinate of the entity's position (bottom left corner).
    Size size;                        ///< Size object representing the entity's dimensions.
    State* state;                     ///< Pointer to the current state of the entity.
    int revenue;                      ///< Revenue generated by the entity.
    float electricityConsumption;     ///< Electricity consumption of the entity.
    float waterConsumption;           ///< Water consumption of the entity.
    std::vector<Entity*> observers;   ///< List of other entities observing this entity.

public:
    /**
     * @brief Default constructor for the Entity class.
     */
    Entity();

    /**
     * @brief Constructs an Entity with specified attributes.
     * 
     * @param ec Entity configuration containing resource consumption and effects.
     * @param size Size of the entity.
     * @param xPos X-coordinate position of the entity.
     * @param yPos Y-coordinate position of the entity.
     */
    Entity(EntityConfig ec, Size size, int xPos, int yPos);

    /**
     * @brief Copy constructor for the Entity class.
     * 
     * Creates a new Entity by copying the attributes of an existing Entity.
     * This performs a deep copy of all properties, ensuring that the new entity
     * is independent of the original.
     * 
     * @param entity Pointer to the Entity object to be copied.
     */
    Entity(Entity* entity);

    /**
     * @brief Virtual destructor for the Entity class.
     */
    virtual ~Entity();

    /**
     * @brief Updates the entity's state. Needs to be implemented in derived classes.
     */
    virtual void update() = 0;

    /**
     * @brief Checks if another entity is within the effect radius of this entity.
     * 
     * @param entity Pointer to the entity to check.
     * @return True if the entity is within the effect radius, false otherwise.
     */
    bool isWithinEffectRadius(Entity* entity);

    /**
     * @brief Gets the X-coordinate position of the entity.
     * 
     * @return The X-coordinate position.
     */
    int getXPosition();

    /**
     * @brief Gets the Y-coordinate position of the entity.
     * 
     * @return The Y-coordinate position.
     */
    int getYPosition();

    /**
     * @brief Sets the X-coordinate position of the entity.
     * 
     * @param x The new X-coordinate position.
     */
    void setXPosition(int x);

    /**
     * @brief Sets the Y-coordinate position of the entity.
     * 
     * @param y The new Y-coordinate position.
     */
    void setYPosition(int y);

    /**
     * @brief Clones the entity. Needs to be implemented in derived classes.
     * 
     * @return A pointer to the cloned entity, or nullptr if not implemented.
     */
    virtual Entity* clone() = 0;

    /**
     * @brief Gets the revenue generated by the entity.
     * 
     * @return The revenue value.
     */
    int getRevenue();

    /**
     * @brief Gets the width of the entity.
     * 
     * @return The width value.
     */
    int getWidth();

    /**
     * @brief Gets the height of the entity.
     * 
     * @return The height value.
     */
    int getHeight();

    /**
     * @brief Checks if the entity is built (i.e., not under construction).
     * 
     * @return True if the entity is built, false otherwise.
     */
    bool isBuilt();

    /**
     * @brief Updates the build state of the entity.
     */
    void updateBuildState();

    /**
     * @brief Sets the symbol of the entity.
     * 
     * @param symbol The new symbol for the entity.
     */
    void setSymbol(std::string symbol);

    /**
     * @brief Subscribes the entity to all residential entities within its effect radius.
     */
    void subscribeToAllResidentialInRadius();

    /**
     * @brief Subscribes this entity as an observer of another entity.
     * 
     * @param entity The entity to subscribe to.
     */
    void subscribe(Entity* entity);

    /**
     * @brief Unsubscribes this entity from observing another entity.
     * 
     * @param entity The entity to unsubscribe from.
     */
    void unsubscribe(Entity* entity);

    /**
     * @brief Unsubscribes this entity from all buildings it is observing.
     */
    void unsubscribeFromAllBuildings();

    /**
     * @brief Called when a new residential building is placed, triggering updates.
     */
    void residentialBuildingPlaced();

    /**
     * @brief Gets the list of entities observing this entity.
     * 
     * @return A constant reference to the vector of observer entities.
     */
    const std::vector<Entity*> getObservers();

    std::string getSymbol();
};

#endif // ENTITY_H

#ifndef WASTEMANAGEMENT_H
#define WASTEMANAGEMENT_H

#include "entities/utility/base/Utility.h"

/**
 * @class WasteManagement
 * @brief Represents a waste management facility in the city builder simulation.
 *
 * The WasteManagement class is a type of Utility that handles waste disposal for the city.
 */
class WasteManagement : public Utility
{
public:
    /**
     * @brief Constructs a WasteManagement object with specified attributes.
     * 
     * Initializes a WasteManagement facility with detailed parameters, including utility consumption, effects, and dimensions.
     * 
     * @param electricity The amount of electricity consumed by the waste management facility.
     * @param water The amount of water consumed by the waste management facility.
     * @param symbol A string symbol representing the waste management facility on the grid.
     * @param radius The radius of effect of the waste management facility.
     * @param localEffect The local effect strength of the waste management facility.
     * @param globalEffect The global effect strength of the waste management facility.
     * @param width The width of the waste management facility.
     * @param height The height of the waste management facility.
     * @param revenue The revenue generated by the waste management facility.
     * @param size The size of the waste management facility (SMALL, MEDIUM, LARGE).
     * @param xPos The X-coordinate of the waste management facility on the grid.
     * @param yPos The Y-coordinate of the waste management facility on the grid.
     * @param buildTime The time taken to build the waste management facility.
     */
    WasteManagement(int electricity, int water, std::string symbol, int radius, int localEffect, int globalEffect, 
           int width, int height, int revenue, Size size, int xPos, int yPos, int buildTime);

    /**
     * @brief Copy constructor for the WasteManagement class.
     * 
     * Creates a new WasteManagement object by copying the attributes of an existing WasteManagement.
     * 
     * @param wasteManagement Pointer to the existing WasteManagement object to be copied.
     */
    WasteManagement(WasteManagement* wasteManagement);

    /**
     * @brief Destructor for the WasteManagement object.
     */
    virtual ~WasteManagement();

    /**
     * @brief Updates the state of the waste management facility.
     * 
     * Defines the specific behavior of the WasteManagement facility when it is updated in the simulation.
     */
    void update();

    /**
     * @brief Clones the current WasteManagement object.
     * 
     * Creates and returns a copy of the current WasteManagement instance.
     * 
     * @return A pointer to the newly cloned WasteManagement object.
     */
    Entity* clone();
};

#endif // WASTEMANAGEMENT_H

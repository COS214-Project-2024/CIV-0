#ifndef POWERPLANT_H
#define POWERPLANT_H

#include "entities/utility/base/Utility.h"

/**
 * @class PowerPlant
 * @brief Represents a power plant in the city builder simulation.
 *
 * The PowerPlant class is a specialized type of Utility that produces electricity.
 */
class PowerPlant : public Utility
{
public:
    /**
     * @brief Constructs a PowerPlant object with specified attributes.
     * 
     * Initializes a PowerPlant with detailed parameters.
     * 
     * @param electricity The amount of electricity consumed by the power plant.
     * @param water The amount of water consumed by the power plant.
     * @param symbol A string symbol representing the power plant on the grid.
     * @param radius The radius of effect of the power plant.
     * @param localEffect The local effect strength of the power plant.
     * @param globalEffect The global effect strength of the power plant.
     * @param width The width of the power plant.
     * @param height The height of the power plant.
     * @param revenue The revenue generated by the power plant.
     * @param size The size of the power plant (SMALL, MEDIUM, LARGE).
     * @param xPos The X-coordinate of the power plant on the grid.
     * @param yPos The Y-coordinate of the power plant on the grid.
     * @param buildTime The time taken to build the power plant.
     */
    PowerPlant(int electricity, int water, std::string symbol, int radius, int localEffect, int globalEffect, 
            int width, int height, int revenue, Size size, int xPos, int yPos, int buildTime);

    /**
     * @brief Copy constructor for the PowerPlant class.
     * 
     * Creates a new PowerPlant object by copying the attributes of an existing PowerPlant.
     * 
     * @param powerPlant Pointer to the existing PowerPlant object to be copied.
     */
    PowerPlant(PowerPlant* powerPlant);

    /**
     * @brief Default constructor for the PowerPlant class.
     * 
     * Creates a new PowerPlant object without initializing any of it's values (naughty).
     */
    PowerPlant();

    /**
     * @brief Destructor for the PowerPlant object.
     */
    virtual ~PowerPlant();

    /**
     * @brief Updates the state of the power plant.
     * 
     * Defines the specific behavior of the PowerPlant when it is updated in the simulation.
     */
    void update();

    /**
     * @brief Clones the current PowerPlant object.
     * 
     * Creates and returns a copy of the current PowerPlant instance.
     * 
     * @return A pointer to the newly cloned PowerPlant object.
     */
    Entity* clone();
};

#endif // POWERPLANT_H
